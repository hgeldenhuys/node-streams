---
version: '2'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    expose:
      - "2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - "/private/var/kafka/zk-data:/var/lib/zookeeper/data"
      - "/private/var/kafka/zk-txn-logs:/var/lib/zookeeper/log"

  broker1:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: broker1
    container_name: broker1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    expose:
      - "9092"
    volumes:
      - "/private/var/kafka/broker1:/var/lib/kafka/data"

  broker2:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: broker2
    container_name: broker2
    depends_on:
      - zookeeper
      - broker1
    ports:
      - "9192:9192"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9192
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    expose:
      - "9192"
    volumes:
      - "/private/var/kafka/broker2:/var/lib/kafka/data"

  broker3:
    image: confluentinc/cp-enterprise-kafka:latest
    hostname: broker3
    container_name: broker3
    depends_on:
      - zookeeper
      - broker2
    ports:
      - "9292:9292"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9292
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      JMX_PORT: 9999
      KAFKA_HEAP_OPTS: -Xms32G -Xmx32G
      KAFKA_inter_broker_protocol_version: 2.1
      KAFKA_log_message_format_version: 2.1
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:9092'
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2182
      CONFLUENT_METRICS_REPORTER_TOPIC_PARTITIONS: 3
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
    expose:
      - "9292"
    volumes:
      - "/private/var/kafka/broker3:/var/lib/kafka/data"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.3.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker1
      - broker2
      - broker3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  connect:
    image: confluentinc/cp-kafka-connect:5.4.0
    depends_on:
      - zookeeper
      - broker1
      - broker2
      - broker3
      - schema-registry
    ports:
      - "8083:8083"
    expose:
      - "8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9192,broker3:9292"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java'
    volumes:
      - ./postgres/postgres-source.json:/connect/postgres-source.json

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.6.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker1
      - broker2
      - broker3
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_KSQL_CONNECT_URL: http://connect:8083
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_APPLICATION_ID: "cp-demo"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9192,broker3:9292"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
#      KSQL_KSQL_CONNECT_WORKER_CONFIG: /etc/ksqldb/config/connect.properties
#    volumes:
#    - "${PWD}/connect.properties:/etc/ksqldb/config/connect.properties"

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker1
      - broker2
      - broker3
      - schema-registry
      - ksqldb-server
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9192,broker3:9292"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:9092,broker2:9092'
#      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker1:9092,broker2:9092,broker3:9092'
      METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      PORT: "9021"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.3.1
    depends_on:
      - zookeeper
      - broker1
      - broker2
      - broker3
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: "broker1:9092,broker2:9192,broker3:9292"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.6.0
    container_name: ksqldb-cli
    depends_on:
      - broker1
      - broker2
      - broker3
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  db:
    restart: always
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=Password.1
    volumes:
      - "${PWD}/postgres/postgres.conf:/etc/postgresql.conf"
  adminer:
    image: adminer
    restart: always
    ports:
      - "8432:8080"

  workqueue:
    image: hgeldenhuys/workqueue
    ports:
      - "3000:3000"
    expose:
      - 3000
